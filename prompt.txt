Título da Tarefa: Expansão da Paleta de Cores com Lógica PWM (Task 4)
Objetivo Estratégico:
Expandir massivamente as capacidades criativas da plataforma BitdogLab através da adição de uma paleta de 12 cores na categoria "Cores". A implementação deve diferenciar entre cores simples (ligando/desligando pinos) e cores complexas (utilizando PWM para controlar o brilho individual de cada LED), e ao mesmo tempo simplificar a ação de "desligar" para um único bloco mais intuitivo.

Manifesto de Arquivos a Serem Modificados:
A implementação completa desta tarefa exigirá modificações nos seguintes quatro arquivos dentro do diretório ui/:

core/block_definitions.js (Definição da estrutura e aparência de todos os blocos)

core/generator_stubs.js (Lógica de tradução do bloco para código MicroPython)

toolbox/rpi_pico.xml (Estrutura do menu de blocos para a placa Pico)

toolbox/default.xml (Estrutura do menu de blocos padrão)

Passo 1: Expansão do Front-End (XML e JavaScript)
Arquivo 1: ui/toolbox/rpi_pico.xml e ui/toolbox/default.xml

Adicione os Novos Blocos de Cor: Em ambos os arquivos XML, dentro da categoria <category name="Cores" ...>, adicione as referências para todos os 12 blocos de cor, substituindo as 3 cores primárias existentes. A categoria deve ficar assim:

<category name="Cores" colour="#A65C99">
  <block type="colour_red"></block>
  <block type="colour_green"></block>
  <block type="colour_blue"></block>
  <block type="colour_yellow"></block>
  <block type="colour_cyan"></block>
  <block type="colour_magenta"></block>
  <block type="colour_white"></block>
  <block type="colour_orange"></block>
  <block type="colour_pink"></block>
  <block type="colour_lime"></block>
  <block type="colour_skyblue"></block>
  <block type="colour_turquoise"></block>
</category>

Arquivo 2: ui/core/block_definitions.js

Gere as Definições dos Novos Blocos de Cor: Crie as definições em JavaScript para cada um dos 12 blocos de cor. Todos devem ser blocos de "valor" com uma outputConnection do tipo "Colour". O rótulo e a cor de fundo de cada bloco devem corresponder ao seu nome (ex: o bloco colour_orange deve ter o texto "Laranja" e um fundo laranja).

Passo 2: Refatoração dos Blocos de LED (Front-End e Back-End)
Arquivo 3: ui/core/block_definitions.js e Arquivo 4: ui/toolbox/*.xml

Substitua "Desligar LED": O bloco led_turn_off que aceita um parâmetro de cor se provou pouco intuitivo.

Ação em block_definitions.js: Remova a definição do bloco led_turn_off e crie uma nova para um bloco chamado led_turn_off_all. Este novo bloco não terá parâmetros e exibirá o texto "Desligar Todos os LEDs".

Ação em toolbox/*.xml: Nos arquivos de toolbox, dentro da categoria "Luzes e Sons", remova a referência ao bloco <block type="led_turn_off"> e adicione <block type="led_turn_off_all">.

Passo 3: Implementação da Lógica de Cores no Back-End (Gerador de Código)
Arquivo 5: ui/core/generator_stubs.js

Esta é a parte mais crítica. A lógica para gerar o código MicroPython será implementada inteiramente dentro dos novos blocos de cor.

Nova Lógica de Geração:

Cada bloco de cor (Blockly.Python['colour_*']) agora deve gerar o código de ação completo para ligar os LEDs necessários.

O gerador do bloco Blockly.Python['led_turn_on'] será simplificado: ele apenas obterá o código do bloco de cor conectado e o retornará.

// Lógica simplificada para 'led_turn_on'
var colour_code = Blockly.Python.valueToCode(block, 'COLOUR', Blockly.Python.ORDER_ATOMIC);
return colour_code || '';

Crie o gerador Blockly.Python['led_turn_off_all'], que deve gerar o código para desligar os três pinos de LED.

# Código a ser gerado por 'led_turn_off_all'
Pin(13, Pin.OUT).off()
Pin(11, Pin.OUT).off()
Pin(12, Pin.OUT).off()
